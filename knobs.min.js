/*! Knobs 1.2.3 MIT | https://github.com/yairEO/knobs */

(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Knobs = {}));
}(this, (function (exports) { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var colorPicker = {exports: {}};

	/*! Color-Picker 0.10.3 MIT | https://github.com/yairEO/color-picker */

	(function (module, exports) {
	!function (t, e) {
	  e(exports) ;
	}(commonjsGlobal, function (t) {
	  var e = t => new DOMParser().parseFromString(t.trim(), "text/html").body.firstElementChild,
	      s = {
	    color: "white",
	    onInput: t => t,
	    onChange: t => t,
	    buttons: {
	      undo: {
	        icon: "↶",
	        title: "Undo"
	      },
	      format: {
	        icon: "⇆",
	        title: "Switch Color Format"
	      },
	      add: {
	        icon: "+",
	        title: "Add to Swatches"
	      }
	    }
	  };
	  const i = t => t.match(/\((.*)\)/)[1].split(",").map(Number),
	        a = t => Object.assign([0, 0, 0, 1], t.match(/\((.*)\)/)[1].split(",").map((t, e) => 3 != e || t.includes("%") ? parseFloat(t) : 100 * parseFloat(t))),
	        o = t => `hsla(${t.h}, ${t.s}%, ${t.l}%, ${t.a}%)`,
	        n = t => t.toFixed(1).replace(".0", ""),
	        h = t => {
	    const [e, s, i, a] = (t => t.match(/\w\w/g))(t),
	          [o, n, h] = [e, s, i].map(t => parseInt(t, 16));
	    return `rgba(${o},${n},${h},${a ? (parseInt(a, 16) / 255).toFixed(2) : 1})`;
	  },
	        r = t => {
	    var e,
	        s = document.createElement("canvas").getContext("2d");
	    return s.fillStyle = t, "#" == (e = s.fillStyle)[0] ? e : l(e);
	  },
	        l = t => {
	    const [e, s, a, o] = i(t),
	          n = "#" + [e, s, a].map(t => t.toString(16).padStart(2, "0")).join("");
	    return 3 == t.length ? n : n + Math.round(255 * o).toString(16).padStart(2, "0");
	  },
	        c = t => {
	    let [e, s, a, o] = i(t);
	    e /= 255, s /= 255, a /= 255;
	    let h = Math.max(e, s, a),
	        r = Math.min(e, s, a),
	        l = h - r,
	        c = 0,
	        u = 0,
	        d = ((h + r) / 2).toPrecision(5);
	    return l && (u = d > .5 ? l / (2 - h - r) : l / (h + r), c = h == e ? (s - a) / l + (s < a ? 6 : 0) : c = h == s ? (a - e) / l + 2 : (e - s) / l + 4, c /= 6), {
	      h: n(360 * c),
	      s: n(100 * u),
	      l: n(100 * d),
	      a: n(100 * o)
	    };
	  },
	        u = (t, e) => (e = (e + "").toLowerCase(), t = r(t), "hex" == e ? t : e.startsWith("hsl") ? o(c(h(t))) : e.startsWith("rgb") ? h(t) : t);
	  function d({
	    name: t,
	    min: e = 0,
	    max: s = 100,
	    value: i
	  }) {
	    return `<div class="range color-picker__${t}" title="${t}" style="--min:${e}; --max:${s};">\n            <input type="range" name="${t}" value="${i}" min="${e}" max="${s}">\n            <output></output>\n            <div class='range__progress'></div>\n          </div>`;
	  }
	  function p(t) {
	    const {
	      buttons: {
	        undo: e,
	        format: s
	      }
	    } = this.settings;
	    return `\n    <div class='color-picker__value cp-checkboard'>\n      <input name='value' inputmode='decimal' placeholder='CSS Color' value='${r(o(t))}'>\n      <button title='${e.title}' name="undo">${e.icon}</button>\n      <button title='${s.title}' name='format'>${s.icon}</button>\n      <div></div>\n    </div>\n  `;
	  }
	  function S(t, e) {
	    const {
	      buttons: {
	        add: s
	      }
	    } = this.settings;
	    return `\n    <div class='color-picker__swatches' style='--initial-len:${e.length}'>\n      <button name='addSwatch' title='${s.title}'>${s.icon}</button>\n      ${t.map(t => m(t, e.includes(t))).join("")}\n    </div>\n  `;
	  }
	  function m(t, e) {
	    return `<div class="cp-checkboard color-picker__swatch" title="${t}" style="--c:${t}">${e ? "" : '<button name="removeSwatch">&times;</button>'}</div>`;
	  }
	  var g = Object.freeze({
	    __proto__: null,
	    scope: function () {
	      const {
	        h: t,
	        s: e,
	        l: s,
	        a: i
	      } = this.color;
	      return `\n    <div class='${("color-picker " + (this.settings.className || "")).trim()}'>\n      ${d({
        name: "hue",
        value: t,
        max: "360"
      })}\n      ${d({
        name: "saturation",
        value: e
      })}\n      ${d({
        name: "lightness",
        value: s
      })}\n      ${d({
        name: "alpha",
        value: i
      })}\n      <output></output>\n      ${p.call(this, this.color)}\n      ${this.swatches ? S.call(this, this.swatches, this.initialSwatches) : ""}\n    </div>\n  `;
	    },
	    slider: d,
	    value: p,
	    swatches: S,
	    swatch: m
	  });
	  function v() {
	    this.syncGlobalSwatchesWithLocal();
	  }
	  function w(t) {
	    t.preventDefault();
	    const {
	      value: e,
	      max: s
	    } = t.target,
	          i = -1 * Math.sign(t.deltaY);
	    e && s && (t.target.value = Math.min(Math.max(+e + i, 0), +s), C.call(this, t));
	  }
	  function f(t) {
	    "Escape" == t.key && this.settings.onClickOutside(t);
	  }
	  function b(t) {
	    this.DOM.scope.contains(t.target) || this.settings.onClickOutside(t);
	  }
	  function C(t) {
	    const {
	      name: e,
	      value: s,
	      type: i
	    } = t.target;
	    "range" == i && this.setColor({ ...this.color,
	      [e[0]]: +s
	    });
	  }
	  function _(t) {
	    const {
	      type: e
	    } = t.target;
	    "range" != e && "text" != e || (this.history.last = this.color);
	  }
	  function y(t) {
	    this.setColor(this.getHSLA(t.target.value)), this.DOM.value.blur();
	  }
	  function O(t) {
	    const {
	      name: e,
	      parentNode: s,
	      classList: i,
	      title: a
	    } = t.target;
	    "format" == e ? this.swithFormat() : "undo" == e ? this.history.undo() : "addSwatch" == e ? this.addSwatch() : "removeSwatch" == e ? this.removeSwatch(s, s.title) : i.contains("color-picker__swatch") && a && (this.history.last = this.color, this.setColor(this.getHSLA(a)));
	  }
	  var $ = Object.freeze({
	    __proto__: null,
	    bindEvents: function () {
	      [["scope", "input", C], ["scope", "change", _], ["scope", "click", O], ["scope", "wheel", w], ["value", "change", y]].forEach(([t, e, s]) => this.DOM[t].addEventListener(e, s.bind(this), {
	        pasive: !1
	      })), window.addEventListener("storage", v.bind(this)), this.settings.onClickOutside && (document.body.addEventListener("click", b.bind(this)), window.addEventListener("keydown", f.bind(this)));
	    }
	  });
	  function M() {
	    const t = () => this.settings.onChange(this.CSSColor),
	          e = this.setColor.bind(this);
	    return {
	      _value: [this.color],
	      get pop() {
	        return this._value.pop();
	      },
	      get previous() {
	        return this._value[this._value.length - 2];
	      },
	      set last(e) {
	        this._value.push(e), t();
	      },
	      undo() {
	        if (this._value.length > 1) {
	          this.pop;
	          let s = this._value[this._value.length - 1];
	          return e(s), t(), s;
	        }
	      }
	    };
	  }
	  const x = "@yaireo/color-picker/swatches";
	  var D = Object.freeze({
	    __proto__: null,
	    getSetGlobalSwatches: function (t) {
	      const e = this.settings.swatchesLocalStorage,
	            s = "string" == typeof e ? e : "";
	      return e && t && (localStorage.setItem(x + s, t), dispatchEvent(new Event("storage"))), localStorage[x + s]?.split(",").filter(String) || [];
	    },
	    syncGlobalSwatchesWithLocal: function () {
	      this.sharedSwatches = this.getSetGlobalSwatches(), this.swatches = this.sharedSwatches.concat(this.initialSwatches), this.DOM.swatches && setTimeout(() => {
	        const t = e(this.templates.swatches.call(this, this.swatches, this.initialSwatches));
	        this.DOM.swatches.replaceWith(t), this.DOM.swatches = t;
	      }, 500);
	    },
	    addSwatch: function (t = this.CSSColor) {
	      if (((t, e) => t.some(t => r(t) == r(e)))(this.swatches, t)) return;
	      const s = e(this.templates.swatch(t));
	      s.classList.add("cp_remove"), this.DOM.swatches.prepend(s), setTimeout(() => s.classList.remove("cp_remove"), 0), this.swatches.unshift(t), this.sharedSwatches.unshift(t), this.getSetGlobalSwatches(this.sharedSwatches);
	    },
	    removeSwatch: function (t, e) {
	      t.classList.add("cp_remove"), setTimeout(() => t.remove(), 200);
	      const s = t => t != e;
	      this.swatches = this.swatches.filter(s), this.sharedSwatches = this.sharedSwatches.filter(s), this.getSetGlobalSwatches(this.sharedSwatches);
	    }
	  });
	  function k(t) {
	    this.settings = Object.assign({}, s, t);
	    const {
	      color: e,
	      defaultFormat: i,
	      swatches: a
	    } = this.settings;
	    this.DOM = {}, this.sharedSwatches = this.getSetGlobalSwatches(), this.initialSwatches = a || [], this.swatches = a && this.sharedSwatches.concat(this.initialSwatches), this.color = u(e, i), this.history = M.call(this), this.init();
	  }
	  k.prototype = {
	    templates: g,
	    ...D,
	    ...$,
	    getColorFormat: t => "#" == t[0] ? "hex" : t.indexOf("hsl") ? t.indexOf("rgb") ? "" : "rgba" : "hsla",
	    getHSLA(t) {
	      let e;
	      if (t) return t.h && t.s ? t : (this.colorFormat = this.getColorFormat(t), t.indexOf("hsla") ? (t = r(t), t = h(t), e = c(t)) : (e = a(t), e = {
	        h: e[0],
	        s: e[1],
	        l: e[2],
	        a: e[3]
	      }), e);
	    },
	    swithFormat() {
	      switch (this.colorFormat) {
	        case "":
	        case "hex":
	          this.colorFormat = "rgba";
	          break;
	        case "rgba":
	          this.colorFormat = "hsla";
	          break;
	        case "hsla":
	          this.colorFormat = "hex";
	      }
	      this.setCSSColor(), this.DOM.value.value = this.CSSColor;
	    },
	    updateRangeSlider(t, e) {
	      const s = this.DOM.scope.querySelector(`input[name="${t}"]`);
	      s && (s.value = e, s.parentNode.style.setProperty("--value", e), s.parentNode.style.setProperty("--text-value", JSON.stringify("" + Math.round(e))), this.updateCSSVar(t, e));
	    },
	    setCSSColor() {
	      this.CSSColor = r(o(this.color)), "rgba" == this.colorFormat ? this.CSSColor = h(this.CSSColor) : "hsla" == this.colorFormat && (this.CSSColor = o(this.color)), this.DOM.scope && this.DOM.scope.setAttribute("data-color-format", this.colorFormat), this.settings.onInput(this.CSSColor);
	    },
	    setColor(t) {
	      t && (t = this.getHSLA(t), this.color = t, this.setCSSColor(), this.DOM.scope && this.updateAllCSSVars(), this.DOM.value && (this.DOM.value.value = this.CSSColor));
	    },
	    updateCSSVar(t, e) {
	      this.DOM.scope.style.setProperty("--" + t, e);
	    },
	    updateAllCSSVars() {
	      const t = this.NamedHSLA(this.color);
	      Object.entries(t).forEach(([t, e]) => {
	        this.updateRangeSlider(t, e);
	      });
	    },
	    NamedHSLA: t => ({
	      hue: t.h,
	      saturation: t.s,
	      lightness: t.l,
	      alpha: t.a
	    }),
	    build() {
	      const t = this.templates.scope.call(this);
	      this.DOM.scope = e(t), this.DOM.value = this.DOM.scope.querySelector('input[name="value"]'), this.DOM.swatches = this.DOM.scope.querySelector(".color-picker__swatches");
	    },
	    init() {
	      this.build(), this.setColor(this.color), this.bindEvents();
	    }
	  }, t.CSStoHSLA = a, t.HSLAtoCSS = o, t.any_to_hex = r, t.changeColorFormat = u, t.default = k, t.hex_rgba = h, t.rgba_hsla = c, Object.defineProperty(t, "__esModule", {
	    value: !0
	  });
	});
	}(colorPicker, colorPicker.exports));

	var ColorPicker = /*@__PURE__*/getDefaultExportFromCjs(colorPicker.exports);

	var mainStyles = "@charset \"UTF-8\";\nlabel, button, input {\n  cursor: pointer;\n  font: 12px Arial, sans-serif;\n}\n\nbody, form {\n  padding: 0;\n  margin: 0;\n}\n\n[css-util-before]::before {\n  content: \"\";\n  opacity: 0.2;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n\n#knobsToggle + .knobs > label {\n  --size: calc(var(--toggleSize)/2);\n  --offset: calc(var(--toggleOffset));\n  position: absolute;\n  width: var(--size);\n  height: var(--size);\n  top: var(--offset);\n  right: var(--offset);\n  padding: calc((var(--toggleSize) - var(--size))/2);\n  font-size: 20px;\n  line-height: 1;\n  z-index: 1;\n  color: var(--textColor);\n}\n#knobsToggle:not(:checked) + .knobs > label:hover + .knobs__bg {\n  opacity: 1;\n  transform: scale(1.15);\n}\n#knobsToggle:checked + .knobs {\n  display: inline-block;\n}\n#knobsToggle:checked + .knobs > label {\n  padding: 0;\n}\n#knobsToggle:checked + .knobs .knobs__bg {\n  --corner-radius: 8px;\n  --offset: calc(var(--corner-radius) * -1);\n  top: var(--offset);\n  right: var(--offset);\n  bottom: var(--offset);\n  left: var(--offset);\n  border-radius: var(--corner-radius);\n  margin: 0;\n  width: calc(100% + var(--corner-radius));\n  height: calc(100% + var(--corner-radius));\n  opacity: 1;\n  transition: 0.3s cubic-bezier(0.45, 0, 0.2, 1), margin 0.2s, border-radius 0.2s;\n}\n#knobsToggle:checked + .knobs .knobs__labels {\n  transform: none;\n  transition: calc(var(--in-duration) * 1s) var(--in-easing);\n}\n#knobsToggle:checked + .knobs .knobs__labels fieldset, #knobsToggle:checked + .knobs .knobs__labels .knobs__controls {\n  transform: none;\n  opacity: 1;\n  transition: calc(var(--in-duration) * 1s) calc(var(--in-duration) * .5s) ease-out;\n}\n\nhtml, body {\n  overflow: hidden;\n}\n\n.knobs {\n  --background: hsl(var(--base-color), var(--base-color-l));\n  --opaqueColor-15: HSL(var(--base-color), calc(var(--base-color-l) + 15%));\n  --range-track-color: var(--primaryColor);\n  --knobs-gap: 3px;\n  --side-pad: 12px;\n  --toggleSize: 40px;\n  --toggleOffset: 6px;\n  --in-easing: cubic-bezier(.75,0,.35,1);\n  --in-duration: .3;\n  --color-size: 20px;\n  --line-height: Max(0px, var(--color-size));\n  --knobs-group-transition: .33s cubic-bezier(.45, 0, .2, 1);\n  --LTR-Bool: 1;\n  /* -1 for RTL */\n  font: 12px/1 \"Fira Sans Condensed\", sans-serif;\n  color: var(--textColor);\n  position: relative;\n  overflow: hidden;\n  /* the <form> element which is the actual knobs wrapper */\n}\n.knobs[data-flow=compact] {\n  --color-size: 16px;\n}\n.knobs[data-flow=compact] label[data-type=select],\n.knobs[data-flow=compact] label[data-type=range] {\n  flex-flow: column;\n}\n.knobs[data-flow=compact] label[data-type=select] .range-slider,\n.knobs[data-flow=compact] label[data-type=range] .range-slider {\n  --thumb-size: 12px;\n  --track-height: calc(var(--thumb-size)/2);\n}\n.knobs[data-flow=compact] label[data-type=select] ~ .knobs__knob__reset,\n.knobs[data-flow=compact] label[data-type=range] ~ .knobs__knob__reset {\n  align-self: flex-start;\n  margin-top: 0.5ch;\n}\n.knobs[data-flow=compact] label[data-type=select] .knobs__label__text,\n.knobs[data-flow=compact] label[data-type=range] .knobs__label__text {\n  margin: 0;\n  padding: 0;\n}\n.knobs label {\n  user-select: none;\n  cursor: pointer;\n}\n.knobs__bg {\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  right: 0;\n  z-index: -1;\n  margin: var(--toggleOffset);\n  width: var(--toggleSize);\n  height: var(--toggleSize);\n  border-radius: 50%;\n  background: var(--background);\n  opacity: 0.8;\n  backdrop-filter: blur(8px);\n  transition: 120ms;\n}\n.knobs__labels {\n  display: flex;\n  flex-flow: column;\n  max-height: 100%;\n  border: var(--border);\n  transform: translateX(calc(100.1% * var(--LTR-Bool)));\n}\n.knobs__labels fieldset {\n  display: table;\n  border: 0;\n  padding: 0;\n  margin: 0;\n  opacity: 0;\n  transform: translateX(calc(22% * var(--LTR-Bool)));\n}\n.knobs__labels fieldset:only-of-type > label {\n  pointer-events: none;\n}\n.knobs__labels fieldset:first-child:not([data-has-legend]) {\n  overflow: visible;\n}\n.knobs__labels .fieldset__group[transition-done] {\n  overflow: visible;\n}\n.knobs__labels .fieldset__group__wrap {\n  padding: var(--side-pad);\n  transition: var(--knobs-group-transition);\n}\n.knobs__labels hr {\n  border: 0;\n  border-top: 1px solid var(--textColor);\n  opacity: 0.25;\n}\n.knobs__labels hr:last-of-type {\n  margin-bottom: 0;\n}\n.knobs__labels label:not(.knobs__legend) {\n  order: 5;\n  flex: 1;\n  display: flex;\n  position: relative;\n  z-index: 1;\n}\n.knobs__labels .range-slider, .knobs__labels input[type=text]:not([size]), .knobs__labels input[type=number]:not([size]) {\n  min-width: 200px;\n}\n.knobs__labels label:not(.knobs__legend) > :last-child {\n  flex: 1;\n  text-align: right;\n  align-self: center;\n}\n.knobs__groups {\n  flex: 1;\n  margin-top: calc(var(--side-pad) * 2.5);\n  overflow-y: scroll;\n  scrollbar-width: none;\n}\n.knobs__groups::-webkit-scrollbar {\n  display: none;\n}\n.knobs__groups > fieldset:first-child .knobs__knob:first-child .range-slider {\n  --value-offset-y: 14px;\n}\n.knobs__legend {\n  display: flex;\n  align-items: center;\n  font-weight: 700;\n  opacity: 0.66;\n  line-height: 1.6;\n  cursor: pointer;\n  transition: 0.2s cubic-bezier(0.45, 0, 0.2, 1);\n}\n.knobs__legend[data-has-label] {\n  gap: 2ch;\n}\n.knobs__legend[data-has-label]:hover {\n  gap: 4ch;\n}\n.knobs__legend::before, .knobs__legend::after {\n  content: \"\";\n  height: 1px;\n  background: var(--textColor);\n  flex: 1;\n  opacity: 0.5;\n  transition: inherit;\n}\n.knobs__legend:hover {\n  opacity: 0.85;\n}\n.knobs__legend > div {\n  display: flex;\n  align-items: center;\n  gap: 2ch;\n}\n.knobs__legend__knobsCount {\n  display: inline-block;\n  border-radius: 50%;\n  width: 1.5em;\n  height: 1.5em;\n  line-height: 1.6;\n  font-size: 0.9em;\n  text-align: center;\n  overflow: hidden;\n  position: relative;\n  transition: var(--knobs-group-transition);\n}\n.knobs__legend__knobsCount::before {\n  background: var(--textColor);\n  opacity: 0.3;\n}\n.knobs__legend__knobsCount:only-child {\n  margin: 0 2ch;\n}\n.knobs .toggleSection:checked ~ .knobs__legend .knobs__legend__knobsCount {\n  transform: scale(0);\n  margin: 0;\n  width: 0;\n}\n.knobs .toggleSection:checked ~ .fieldset__group[transitioned] {\n  overflow: hidden;\n}\n.knobs .toggleSection:not(:checked) ~ .knobs__legend {\n  margin-bottom: 1em;\n}\n.knobs .toggleSection:not(:checked) ~ .fieldset__group {\n  overflow: hidden;\n}\n.knobs .toggleSection:not(:checked) ~ .fieldset__group .fieldset__group__wrap {\n  opacity: 0;\n  margin-top: calc(var(--height) * -1px);\n  text-shadow: 0px 3px 2px;\n}\n\n.knobs[data-flow=compact] .knobs__knob__toggle {\n  align-self: flex-start;\n  margin-top: calc(var(--knobs-gap, 6px) + 2px);\n}\n.knobs__knob {\n  display: flex;\n  justify-content: flex-end;\n  position: relative;\n  line-height: var(--line-height);\n  min-height: 24px;\n}\n.knobs__knob:hover .knobs__knob__label__text {\n  opacity: 1;\n}\n.knobs__knob[data-changed] .knobs__knob__reset {\n  opacity: 0.75;\n  pointer-events: auto;\n}\n.knobs__knob[data-changed] .knobs__knob__reset:hover {\n  opacity: 1;\n  background: var(--textColor);\n  color: var(--background);\n  transition: 0s;\n}\n.knobs__knob__toggle {\n  display: var(--knobs-toggle, none);\n  order: 1;\n  align-self: center;\n  margin: 0 5px 0 0;\n  appearance: none;\n  width: 12px;\n  height: 12px;\n  outline: none;\n  border-radius: 50%;\n  position: relative;\n  text-align: center;\n  line-height: 10px;\n}\n.knobs__knob__toggle::before {\n  border: 1px solid var(--textColor);\n  opacity: 0.4;\n  border-radius: 3px;\n}\n.knobs__knob__toggle::after {\n  content: \"\";\n  height: 100%;\n  z-index: 5;\n  width: 999px;\n  position: absolute;\n  left: 0;\n  pointer-events: none;\n}\n.knobs__knob__toggle:hover::before {\n  opacity: 1;\n}\n.knobs__knob__toggle:checked:hover ~ * {\n  text-decoration: line-through;\n  transition: 0.15s;\n}\n.knobs__knob__toggle:checked::after {\n  content: \"✔\";\n  color: var(--textColor);\n  font-size: 12px;\n  text-shadow: -1px -2px var(--background), 3px -2px var(--background);\n  position: relative;\n  z-index: 1;\n}\n.knobs__knob__toggle:not(:checked) ~ * {\n  pointer-events: none !important;\n  filter: grayscale(50%);\n  opacity: 0.4;\n  transition: 0.2s;\n}\n.knobs__knob__toggle:not(:checked) ~ * ::-webkit-slider-thumb {\n  pointer-events: none !important;\n}\n.knobs__knob__toggle:not(:checked) ~ * ::-moz-slider-thumb {\n  pointer-events: none !important;\n}\n.knobs__knob__reset {\n  order: 0;\n  pointer-events: none;\n  margin-right: 0.5em;\n  padding: 0;\n  align-self: center;\n  color: inherit;\n  background: none;\n  border: 0;\n  cursor: pointer;\n  opacity: 0.33;\n  outline: none;\n  border-radius: 50%;\n  width: 2ch;\n  height: 2ch;\n  user-select: none;\n  transition: 0.15s ease-out;\n}\n.knobs__knob__label__text {\n  margin-right: 2ch;\n  white-space: nowrap;\n  display: flex;\n  align-items: center;\n  opacity: 0.8;\n  transition: 80ms;\n}\n.knobs__knob__label__text::after {\n  content: attr(data-units);\n  opacity: 0.5;\n  margin-left: 1ch;\n}\n\n.leversIcon {\n  width: 56px;\n  transform: scale(0.4);\n  transform-origin: 0 0;\n}\n.leversIcon > div {\n  display: flex;\n  align-items: center;\n  transition: transform 0.2s ease;\n}\n.leversIcon > div:nth-child(1)::before {\n  flex: 0.33;\n  transition-delay: 0.3s;\n}\n.leversIcon > div:nth-child(2) {\n  margin: 2px 0;\n}\n.leversIcon > div:nth-child(2)::after {\n  flex: 0.33;\n}\n.leversIcon > div:nth-child(3)::before {\n  flex: 0.8;\n  transition-delay: 0.1s;\n}\n.leversIcon > div > b {\n  display: inline-block;\n  width: 7.5px;\n  height: 7.5px;\n  border-radius: 50%;\n  border: 4px solid currentColor;\n  margin: 0 5px;\n}\n.leversIcon > div::before, .leversIcon > div::after {\n  content: \"\";\n  height: 5px;\n  background: currentColor;\n  border-radius: 5px;\n  flex: 1;\n  transition: flex 0.1s ease;\n}\n.leversIcon > div::after {\n  flex: auto;\n  opacity: 0.33;\n}\n\n@keyframes leversIcon {\n  30% {\n    flex: 0.2;\n  }\n  80% {\n    flex: 5;\n  }\n}\n#knobsToggle:not(:checked) + .knobs > label:hover .leversIcon > div:nth-child(1)::before {\n  animation: 1s leversIcon ease infinite;\n}\n#knobsToggle:not(:checked) + .knobs > label:hover .leversIcon > div:nth-child(2) {\n  margin: 1px 0;\n}\n#knobsToggle:not(:checked) + .knobs > label:hover .leversIcon > div:nth-child(2)::after {\n  animation: 1s 0.1s leversIcon ease reverse infinite;\n}\n#knobsToggle:not(:checked) + .knobs > label:hover .leversIcon > div:nth-child(3)::before {\n  animation: 1.2s 0.15s leversIcon ease alternate infinite;\n}\n\n#knobsToggle:checked + .knobs > label {\n  --size: 18px;\n  --offset: calc(var(--toggleOffset) + var(--size)/3);\n}\n#knobsToggle:checked + .knobs > label .leversIcon {\n  width: 65px;\n  color: var(--textColor);\n  transition: color 0.2s;\n  transform: scale(0.3) translate(0, 6px);\n  opacity: 0.7;\n}\n#knobsToggle:checked + .knobs > label .leversIcon:hover {\n  opacity: 1;\n}\n#knobsToggle:checked + .knobs > label .leversIcon b {\n  transform: scale(0);\n  margin: 0;\n  width: 0;\n}\n#knobsToggle:checked + .knobs > label .leversIcon > div::after {\n  flex: 0;\n}\n#knobsToggle:checked + .knobs > label .leversIcon > div::before {\n  flex: 3;\n  height: 8px;\n}\n#knobsToggle:checked + .knobs > label .leversIcon > div:nth-child(1) {\n  transform: rotate(45deg);\n  transform-origin: 20% 50%;\n}\n#knobsToggle:checked + .knobs > label .leversIcon > div:nth-child(2) {\n  opacity: 0;\n}\n#knobsToggle:checked + .knobs > label .leversIcon > div:nth-child(3) {\n  transform: rotate(-45deg);\n  transform-origin: 0 0;\n}\n\n#knobsToggle:checked + .knobs[data-position~=top] .knobs__bg {\n  bottom: auto;\n}\n#knobsToggle:checked + .knobs[data-position~=right] .knobs__bg {\n  left: auto;\n}\n#knobsToggle:checked + .knobs[data-position~=bottom] > label {\n  top: auto;\n  bottom: var(--offset);\n}\n#knobsToggle:checked + .knobs[data-position~=bottom] .knobs__bg {\n  top: auto;\n}\n#knobsToggle:checked + .knobs[data-position~=left] > label {\n  right: auto;\n  left: var(--offset);\n}\n#knobsToggle:checked + .knobs[data-position~=left] .knobs__bg {\n  right: auto;\n}\n#knobsToggle:checked + .knobs[data-position~=left][data-position~=bottom] {\n  --control-left-pad: var(--toggleSize);\n}\n\n.knobs[data-position~=left] {\n  --LTR-Bool: -1;\n}\n\n.knobs label[data-type=select] .knobs__knob__inputWrap::before {\n  --hide: Calc(var(--value) - var(--value));\n  content: \"N/A\";\n  font-style: italic;\n  opacity: var(--hide);\n  filter: opacity(0.5);\n  position: absolute;\n  right: 2em;\n  pointer-events: none;\n}\n.knobs label[data-type=select]::after {\n  content: \"❯\";\n  pointer-events: none;\n  align-self: center;\n  transform: translate(-100%, var(--offset-y, -1px)) rotate(90deg) scaleY(0.8);\n  transition: 0.1s;\n}\n.knobs label[data-type=select]:hover {\n  --offset-y: 1px;\n}\n.knobs label[data-type=select] select {\n  font: inherit;\n  background: none;\n  color: var(--textColor);\n  padding: 3px 0;\n  cursor: pointer;\n  border: none;\n  outline: none;\n  text-align-last: right;\n  appearance: none;\n  padding: 0 1.1em 0 0;\n}\n.knobs label[data-type=select] option {\n  background: var(--background);\n}\n\n.knobs .range-slider {\n  --fill-color: var(--range-track-color);\n  --primaryColor: var(--range-value-background);\n  --value-active-color: var(--range-track-color);\n  --value-background: transparent;\n  --value-background-hover: white;\n  --value-offset-y: 9px;\n  --progress-background: #444;\n  --thumb-size: 14px;\n  --track-height: calc(var(--thumb-size)/3);\n  --ticks-thickness: 1px;\n  --ticks-height: 0px;\n  --show-min-max: none;\n  --thumb-color: var(--range-track-color);\n  --thumb-shadow: 0 0 3px rgba(0,0,0,.2), 0 0 0 calc(var(--thumb-size)/6) inset white;\n  --thumb-shadow-active: 0 0 3px rgba(0,0,0,.2), 0 0 0 calc(var(--thumb-size)/4) inset white;\n  color: transparent;\n}\n.knobs .range-slider > input:hover + output {\n  box-shadow: 0 0 0 3px var(--value-background), 0 0 6px 4px var(--background);\n}\n\n.range-slider {\n  --primary-color: #0366D6;\n  --value-offset-y: var(--ticks-gap);\n  --value-active-color: white;\n  --value-background: transparent;\n  --value-background-hover: var(--primary-color);\n  --value-font: 700 12px/1 Arial;\n  --fill-color: var(--primary-color);\n  --progress-background: #EEE;\n  --progress-radius: 20px;\n  --track-height: calc(var(--thumb-size)/2);\n  --min-max-font: 12px Arial;\n  --min-max-opacity: .5;\n  --min-max-x-offset: 10%;\n  --thumb-size: 22px;\n  --thumb-color: white;\n  --thumb-shadow: 0 0 3px rgba(0,0,0,.4),\n                  0 0 1px rgba(0,0,0,.5) inset,\n                  0 0 0 99px var(--thumb-color) inset;\n  --thumb-shadow-active: 0 0 0 calc(var(--thumb-size)/4) inset var(--thumb-color),\n                         0 0 0 99px var(--primary-color) inset,\n                         0 0 3px rgba(0,0,0,.4);\n  --thumb-shadow-hover: var(--thumb-shadow);\n  --ticks-thickness: 1px;\n  --ticks-height: 5px;\n  --ticks-gap: var(--ticks-height, 0);\n  --ticks-color: silver;\n  --step: 1;\n  --ticks-count: (var(--max) - var(--min)) / var(--step);\n  --maxTicksAllowed: 30;\n  --too-many-ticks: Min(1, Max(var(--ticks-count) - var(--maxTicksAllowed), 0));\n  --x-step: Max( var(--step), var(--too-many-ticks) * (var(--max) - var(--min)) );\n  --tickIntervalPerc_1: Calc( (var(--max) - var(--min)) / var(--x-step) );\n  --tickIntervalPerc: calc( (100% - var(--thumb-size))/var(--tickIntervalPerc_1) * var(--tickEvery, 1) );\n  --value-a: Clamp(var(--min), var(--value, 0), var(--max));\n  --value-b: var(--value, 0);\n  --text-value-a: var(--text-value, \"\");\n  --completed-a: calc((var(--value-a) - var(--min) ) / (var(--max) - var(--min)) * 100);\n  --completed-b: calc((var(--value-b) - var(--min) ) / (var(--max) - var(--min)) * 100);\n  --ca: Min(var(--completed-a), var(--completed-b));\n  --cb: Max(var(--completed-a), var(--completed-b));\n  --thumbs-too-close: Clamp(\n    -1,\n    1000 * (Min(1, Max(var(--cb) - var(--ca) - 5, -1)) + 0.001),\n    1\n  );\n  --thumb-close-to-min: Min(1, Max(var(--ca) - 5, 0));\n  --thumb-close-to-max: Min(1, Max(95 - var(--cb), 0));\n  box-sizing: content-box;\n  display: inline-block;\n  height: max(var(--track-height), var(--thumb-size));\n  background: linear-gradient(to right, var(--ticks-color) var(--ticks-thickness), transparent 1px) repeat-x;\n  background-size: var(--tickIntervalPerc) var(--ticks-height);\n  background-position-x: calc(var(--thumb-size)/2 - var(--ticks-thickness)/2);\n  background-position-y: var(--flip-y, bottom);\n  padding-bottom: var(--flip-y, var(--ticks-gap));\n  padding-top: calc(var(--flip-y) * var(--ticks-gap));\n  position: relative;\n  z-index: 1;\n}\n.range-slider[data-ticks-position=top] {\n  --flip-y: 1;\n}\n.range-slider::before, .range-slider::after {\n  --offset: calc(var(--thumb-size)/2);\n  content: counter(x);\n  display: var(--show-min-max, block);\n  font: var(--min-max-font);\n  position: absolute;\n  bottom: var(--flip-y, -2.5ch);\n  top: calc(-2.5ch * var(--flip-y));\n  opacity: clamp(0, var(--at-edge), var(--min-max-opacity));\n  transform: translateX(calc( var(--min-max-x-offset) * var(--before, -1) * -1 )) scale(var(--at-edge));\n  pointer-events: none;\n}\n.range-slider::before {\n  --before: 1;\n  --at-edge: var(--thumb-close-to-min);\n  counter-reset: x var(--min);\n  left: var(--offset);\n}\n.range-slider::after {\n  --at-edge: var(--thumb-close-to-max);\n  counter-reset: x var(--max);\n  right: var(--offset);\n}\n.range-slider__values {\n  position: relative;\n  top: 50%;\n  line-height: 0;\n  text-align: justify;\n  width: 100%;\n  pointer-events: none;\n  margin: 0 auto;\n  z-index: 5;\n}\n.range-slider__values::after {\n  content: \"\";\n  width: 100%;\n  display: inline-block;\n  height: 0;\n  background: red;\n}\n.range-slider__progress {\n  --start-end: calc(var(--thumb-size)/2);\n  --clip-end: calc(100% - (var(--cb) ) * 1%);\n  --clip-start: calc(var(--ca) * 1%);\n  --clip: inset(-20px var(--clip-end) -20px var(--clip-start));\n  position: absolute;\n  left: var(--start-end);\n  right: var(--start-end);\n  top: calc(var(--ticks-gap) * var(--flip-y,0) + var(--thumb-size)/2 - var(--track-height)/2);\n  height: calc(var(--track-height));\n  background: var(--progress-background, #EEE);\n  pointer-events: none;\n  z-index: -1;\n  border-radius: var(--progress-radius);\n}\n.range-slider__progress::before {\n  content: \"\";\n  position: absolute;\n  left: 0;\n  right: 0;\n  clip-path: var(--clip);\n  top: 0;\n  bottom: 0;\n  background: var(--fill-color, black);\n  box-shadow: var(--progress-flll-shadow);\n  z-index: 1;\n  border-radius: inherit;\n}\n.range-slider__progress::after {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  box-shadow: var(--progress-shadow);\n  pointer-events: none;\n  border-radius: inherit;\n}\n.range-slider > input {\n  -webkit-appearance: none;\n  width: 100%;\n  height: var(--thumb-size);\n  margin: 0;\n  position: absolute;\n  left: 0;\n  top: calc(50% - Max(var(--track-height), var(--thumb-size))/2 + calc(var(--ticks-gap)/2 * var(--flip-y, -1)));\n  cursor: -webkit-grab;\n  cursor: grab;\n  outline: none;\n  background: none;\n}\n.range-slider > input:not(:only-of-type) {\n  pointer-events: none;\n}\n.range-slider > input::-webkit-slider-thumb {\n  appearance: none;\n  border: none;\n  height: var(--thumb-size);\n  width: var(--thumb-size);\n  transform: var(--thumb-transform);\n  border-radius: var(--thumb-radius, 50%);\n  background: var(--thumb-color);\n  box-shadow: var(--thumb-shadow);\n  pointer-events: auto;\n  transition: 0.1s;\n}\n.range-slider > input::-moz-range-thumb {\n  appearance: none;\n  border: none;\n  height: var(--thumb-size);\n  width: var(--thumb-size);\n  transform: var(--thumb-transform);\n  border-radius: var(--thumb-radius, 50%);\n  background: var(--thumb-color);\n  box-shadow: var(--thumb-shadow);\n  pointer-events: auto;\n  transition: 0.1s;\n}\n.range-slider > input::-ms-thumb {\n  appearance: none;\n  border: none;\n  height: var(--thumb-size);\n  width: var(--thumb-size);\n  transform: var(--thumb-transform);\n  border-radius: var(--thumb-radius, 50%);\n  background: var(--thumb-color);\n  box-shadow: var(--thumb-shadow);\n  pointer-events: auto;\n  transition: 0.1s;\n}\n.range-slider > input:hover {\n  --thumb-shadow: var(--thumb-shadow-hover);\n}\n.range-slider > input:hover + output {\n  --value-background: var(--value-background-hover);\n  --y-offset: -5px;\n  color: var(--value-active-color);\n  box-shadow: 0 0 0 3px var(--value-background);\n}\n.range-slider > input:active {\n  --thumb-shadow: var(--thumb-shadow-active);\n  cursor: grabbing;\n  z-index: 2;\n}\n.range-slider > input:active + output {\n  transition: 0s;\n}\n.range-slider > input:nth-of-type(1) {\n  --is-left-most: Clamp(0, (var(--value-a) - var(--value-b)) * 99999 ,1);\n}\n.range-slider > input:nth-of-type(1) + output {\n  --value: var(--value-a);\n  --x-offset: calc(var(--completed-a) * -1%);\n}\n.range-slider > input:nth-of-type(1) + output:not(:only-of-type) {\n  --flip: calc(var(--thumbs-too-close) * -1);\n}\n.range-slider > input:nth-of-type(1) + output::after {\n  content: var(--prefix, \"\") var(--text-value-a) var(--suffix, \"\");\n}\n.range-slider > input:nth-of-type(2) {\n  --is-left-most: Clamp(0, (var(--value-b) - var(--value-a)) * 99999 ,1);\n}\n.range-slider > input:nth-of-type(2) + output {\n  --value: var(--value-b);\n}\n.range-slider > input:only-of-type ~ .range-slider__progress {\n  --clip-start: 0;\n}\n.range-slider > input + output {\n  --flip: -1;\n  --x-offset: calc(var(--completed-b) * -1%);\n  --pos: calc(((var(--value) - var(--min))/(var(--max) - var(--min))) * 100%);\n  pointer-events: none;\n  position: absolute;\n  z-index: 5;\n  background: var(--value-background);\n  border-radius: 10px;\n  padding: 2px 4px;\n  left: var(--pos);\n  transform: translate(var(--x-offset), calc(150% * var(--flip) - (var(--y-offset, 0px) + var(--value-offset-y)) * var(--flip)));\n  transition: all 0.12s ease-out, left 0s;\n}\n.range-slider > input + output::after {\n  content: var(--prefix, \"\") var(--text-value-b) var(--suffix, \"\");\n  font: var(--value-font);\n}\n\n.knobs[data-flow=compact] .switch {\n  --size: 10px;\n  --thumb-scale: 1.3;\n}\n.knobs[data-flow=compact] .switch__gfx {\n  padding: 0;\n}\n.knobs .switch {\n  --color-bg: #444;\n  --color-bg-on: #444;\n  --thumb-color-off: #d75d4a;\n  --thumb-color-on: #4ec964;\n  --thumb-scale: 1.1;\n  --width-multiplier: 2.5;\n  --thumb-animation-pad: 15%;\n  --size: 1em;\n}\n.knobs .switch .switch__gfx {\n  background: none;\n  border: 1px solid var(--bg, var(--color-bg));\n}\n.knobs .switch input:focus + div {\n  outline: none;\n}\n\n.switch {\n  --color-bg: #E1E1E1;\n  --color-bg-on: #16B5FF;\n  --thumb-color-on: white;\n  --thumb-color-off: var(--thumb-color-on);\n  --thumb-scale: 1;\n  --size: 16px;\n  --duration: .18s;\n  --width-multiplier: 2.5;\n  --thumb-animation-pad: 15%;\n  user-select: none;\n  display: inline-flex;\n  align-items: center;\n}\n@keyframes switchMoveThumb {\n  50% {\n    padding: 0 var(--thumb-animation-pad);\n  }\n}\n@keyframes switchMoveThumb1 {\n  50% {\n    padding: 0 var(--thumb-animation-pad);\n  }\n}\n.switch--textRight .switch__label {\n  order: 10;\n  padding: 0 0 0 0.4em;\n}\n.switch > div {\n  cursor: pointer;\n}\n.switch__label {\n  order: 0;\n  padding-right: 0.4em;\n  color: var(--label-color);\n}\n.switch__gfx {\n  --thumb-left: 0%;\n  --transform: translateX(calc(var(--thumb-left) * -1)) scale(var(--thumb-scale));\n  order: 5;\n  padding: 3px;\n  position: relative;\n  background: var(--bg, var(--color-bg));\n  border-radius: 50px;\n  width: calc(var(--size) * var(--width-multiplier));\n  transition: var(--duration);\n  background-size: 4px 4px;\n}\n.switch__gfx::before {\n  content: \"\";\n  display: block;\n  position: relative;\n  left: var(--thumb-left);\n  background: var(--thumb-color, var(--thumb-color-off));\n  border-radius: var(--size);\n  width: var(--size);\n  height: var(--size);\n  transform: var(--transform);\n  transition: var(--duration);\n  animation: switchMoveThumb var(--duration) ease 1;\n}\n.switch input {\n  position: absolute;\n  opacity: 0;\n}\n.switch input[disabled] + div {\n  background-image: linear-gradient(45deg, white 25%, transparent 25%, transparent 50%, white 50%, white 75%, transparent 75%);\n}\n.switch input:disabled ~ div {\n  cursor: not-allowed;\n}\n.switch input:indeterminate + div {\n  --thumb-left: 50%;\n}\n.switch input:checked + div {\n  --bg: var(--color-bg-on);\n  --thumb-left: 100%;\n  --thumb-color: var(--thumb-color-on);\n}\n.switch input:checked + div::before {\n  animation-name: switchMoveThumb1;\n}\n.switch input:focus + div {\n  outline: 1px dotted silver;\n}\n.switch input:focus:not(:focus-visible) + div {\n  outline: none;\n}\n\n/* bottom controls (apply/reset) */\n.knobs__controls {\n  display: flex;\n  align-items: center;\n  opacity: 0;\n  flex-direction: row-reverse;\n  margin: var(--side-pad) var(--control-right-pad, var(--side-pad)) 5px var(--control-left-pad, var(--side-pad));\n  position: relative;\n  z-index: 1;\n}\n.knobs__controls > input {\n  color: var(--textColor);\n  border: 0;\n  background: none;\n  margin-left: 1em;\n  line-height: 1;\n  padding: 5px 8px;\n  border-radius: 3px;\n  position: relative;\n}\n.knobs__controls > input:hover:not(:active) {\n  background: var(--opaqueColor-15);\n}\n\n.poweredBy {\n  margin-right: auto;\n  text-decoration: none;\n  color: inherit;\n  padding: 3px;\n  font-size: 10px;\n  opacity: 0.5;\n  transition: 0.15s;\n}\n\n.poweredBy:hover {\n  color: var(--primaryColor);\n  opacity: 1;\n}\n\n/* wrapper for \"color\" inputs */\nlabel[data-type=color] > .knobs__knob__inputWrap > div {\n  display: inline-block;\n  border-radius: 5px;\n  overflow: hidden;\n  width: calc(var(--color-size) * 4);\n  height: calc(var(--color-size) - 2px);\n  background: var(--background) repeating-conic-gradient(#FFFFFF44 0% 25%, transparent 0% 50%) 0/7px 7px;\n}\nlabel[data-type=color]:hover > .knobs__knob__inputWrap > div {\n  animation: colorHover 0.3s ease-out;\n}\nlabel[data-type=color] input {\n  width: 100%;\n  height: 100%;\n  border: 0;\n  background: var(--value);\n  color: transparent;\n  outline: none;\n  caret-color: transparent;\n  text-transform: uppercase;\n  font-weight: 600;\n}\nlabel[data-type=color] input::selection {\n  color: transparent;\n}\n\n@keyframes colorHover {\n  30% {\n    width: calc(var(--color-size) * 4.5);\n  }\n  60% {\n    width: calc(var(--color-size) * 3.5);\n  }\n}\n/* wrapper for \"color\" inputs */\nlabel[data-type=text] input, label[data-type=number] input {\n  cursor: text;\n  padding: 5px;\n  border-radius: 3px;\n  color: var(--textColor);\n  outline: none;\n  border: 0;\n  background: var(--opaqueColor-15);\n}\nlabel[data-type=text] input:focus, label[data-type=number] input:focus {\n  box-shadow: 0 0 0 1px HSL(var(--base-color), calc(var(--base-color-l) + 22%));\n}\n\nlabel[data-type=radio] > .knobs__knob__inputWrap {\n  display: flex;\n  gap: var(--radio-group-gap, 1.5em);\n  align-items: center;\n  justify-content: flex-end;\n}\nlabel[data-type=radio] > .knobs__knob__inputWrap > label {\n  flex: 0;\n  display: inline-flex;\n  gap: 0.5em;\n  align-items: center;\n}\nlabel[data-type=radio] > .knobs__knob__inputWrap > label:hover > *:not(input) {\n  opacity: 0.7;\n}\nlabel[data-type=radio] > .knobs__knob__inputWrap > label input {\n  margin: 0;\n}\nlabel[data-type=radio] > .knobs__knob__inputWrap > label input ~ * {\n  opacity: 0.5;\n  transition: 0.25s;\n}\nlabel[data-type=radio] > .knobs__knob__inputWrap > label input:checked ~ * {\n  opacity: 1;\n  transition: 0s;\n}\nlabel[data-type=radio] > .knobs__knob__inputWrap svg {\n  fill: var(--textColor);\n  height: 20px;\n}";

	var hostStyles = ".color-picker {\n  z-index: 999999;\n  position: fixed;\n}";

	var colorPickerStyles = ".color-picker .range {\n  --tickEvery: 400;\n  --primaryColor: #000;\n  --progress-color: transparent;\n  --progress-shadow: unset;\n  --value-active-color: white;\n  --value-background: white;\n  --value-font: 700 12px/1 Arial;\n  --fill-color: var(--primaryColor);\n  --thumb-size: 21px;\n  --track-height: calc(var(--thumb-size)/1.5);\n  --thumb-shadow: 0 0 3px rgba(0,0,0,.2);\n  --step: 1;\n  --completed: calc((var(--value) - var(--min) ) / (var(--max) - var(--min)) * 100);\n  --show-min-max: none;\n  --LTR: 1;\n  display: inline-block;\n  height: max(var(--track-height), var(--thumb-size));\n  background: none;\n  position: relative;\n  z-index: 1;\n  padding-bottom: 0;\n  padding-top: 0;\n  margin: 0 0 calc((var(--thumb-size) - var(--track-height)) * -1);\n}\n\n.color-picker .range__progress {\n  position: absolute;\n  left: 0;\n  top: 50%;\n  transform: translateY(-50%) translateZ(0);\n  width: 100%;\n  height: calc(var(--track-height));\n  pointer-events: none;\n  z-index: -1;\n  box-shadow: var(--progress-shadow);\n  border-radius: 20px;\n  background: var(--fill-color, white);\n}\n\n.color-picker .range__progress::after {\n  content: unset;\n}\n\n.color-picker .range > input {\n  --thumb-color: transparent;\n  --inner-shadow: 0 0 0 calc(var(--thumb-size)/8) inset white;\n  -webkit-appearance: none;\n  width: 100%;\n  height: var(--thumb-size);\n  margin: 0;\n  cursor: -webkit-grab;\n  cursor: grab;\n  outline: none;\n  background: none;\n}\n\n.color-picker .range > input::-webkit-slider-thumb {\n  appearance: none;\n  height: var(--thumb-size);\n  width: var(--thumb-size);\n  border-radius: 50%;\n  background: var(--thumb-color, white);\n  border: 1px solid silver;\n  box-shadow: var(--inner-shadow, 0 0), var(--thumb-shadow);\n}\n\n.color-picker .range > input::-moz-range-thumb {\n  appearance: none;\n  height: var(--thumb-size);\n  width: var(--thumb-size);\n  border-radius: 50%;\n  background: var(--thumb-color, white);\n  border: 1px solid silver;\n  box-shadow: var(--inner-shadow, 0 0), var(--thumb-shadow);\n}\n\n.color-picker .range > input:active {\n  cursor: grabbing;\n}\n\n.color-picker .range > input:active + output {\n  transition: 0s;\n}\n\n.color-picker .range > input:hover + output {\n  --value-background: var(--primaryColor);\n  opacity: 1;\n  color: var(--value-active-color);\n  transform: translate(var(--x-offset), 0);\n  box-shadow: 0 0 0 3px var(--value-background);\n}\n\n.color-picker .range > output {\n  --x-offset: calc(var(--completed) * -1% * var(--LTR));\n  --pos: calc(((var(--value) - var(--min))/(var(--max) - var(--min))) * 100%);\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  z-index: 5;\n  background: var(--value-background);\n  border-radius: 10px;\n  padding: 0 4px;\n  top: -3.5ch;\n  left: var(--pos);\n  transform: translate(var(--x-offset), 6px);\n  transition: all 0.12s ease-out, left 0s, top 0s;\n}\n\n.color-picker .range > output::before {\n  --size: 5px;\n  content: \"\";\n  top: calc(100% + 2px);\n  left: 50%;\n  border: solid transparent;\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n  border-top-color: var(--value-background);\n  border-width: var(--size);\n  margin-left: calc(var(--size) * -1);\n  transition: inherit;\n}\n\n.color-picker .range > output::after {\n  content: var(--text-value);\n  font: var(--value-font);\n}\n\n.color-picker {\n  --hue: 150;\n  --saturation: 100;\n  --lightness: 50;\n  --alpha: 100;\n  --s: calc(var(--saturation) * 1%);\n  --l: calc(var(--lightness) * 1%);\n  --a: calc(var(--alpha) * 1%);\n  --color: hsla(var(--hue), var(--s), var(--l), var(--a));\n  --checkboard-color: #DDD;\n  --checkboard-base-gradient: repeating-conic-gradient(var(--checkboard-color) 0% 25%, transparent 0% 50%);\n  --width: 320;\n  --width-units: 1px;\n  display: flex;\n  flex-flow: column;\n  gap: 0.5em;\n  width: calc(var(--width) * var(--width-units));\n  position: relative;\n  box-sizing: border-box;\n  transition: opacity 0.15s, transform 0.15s;\n  transition-timing-function: ease-out;\n}\n\n.color-picker__hue.range {\n  grid-area: hue;\n  --fill-color: linear-gradient(to right, red 0%, #ff0 16.6%, lime 33.3%, cyan 50%, blue 66.6%, #f0f 83.3%, red 100%);\n}\n\n.color-picker__saturation.range {\n  grid-area: saturation;\n  --fill-color: linear-gradient(to right, white, hsl(var(--hue),var(--s), 50%));\n}\n\n.color-picker__lightness.range {\n  grid-area: lightness;\n  --c: hsl(var(--hue), var(--s), 50%);\n  --fill-color: linear-gradient(to right, black, var(--c), white);\n}\n\n.color-picker__alpha.range {\n  grid-area: alpha;\n  --checkboard-size: calc(var(--track-height)/2);\n  --fill-color: linear-gradient(to right, transparent, hsl(var(--hue), var(--s), var(--l))),\n  var(--checkboard-base-gradient)\n  0 / var(--checkboard-size) var(--checkboard-size);\n}\n\n.color-picker button {\n  cursor: pointer;\n  border: none;\n  background: none;\n  outline: none;\n}\n\n.cp-checkboard::before {\n  content: \"\";\n  position: absolute;\n  z-index: -1;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  border-radius: inherit;\n  background: repeating-conic-gradient(var(--checkboard-color) 0% 25%, transparent 0% 50%) 0/12px 12px;\n}\n\n.color-picker > output {\n  grid-area: color;\n  border-radius: 5px;\n  overflow: hidden;\n  position: relative;\n  width: 50px;\n  background: hsla(var(--hue), var(--s), var(--l), var(--a));\n  box-shadow: 0 0 8px -5px;\n}\n\n.color-picker > output::before {\n  content: \"\";\n  position: absolute;\n  z-index: -1;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: repeating-conic-gradient(var(--checkboard-color) 0% 25%, transparent 0% 50%) 0/12px 12px;\n}\n\n.color-picker.hidden {\n  opacity: 0;\n  pointer-events: none;\n  transform: scale(0.95);\n}\n\n.color-picker[style~=\"left:\"] {\n  position: absolute;\n  z-index: 999999;\n  border-radius: 10px;\n  padding: 0.5em;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.25);\n  backdrop-filter: blur(3px);\n  background-color: rgba(255, 255, 255, 0.5);\n}\n\n@media only screen and (max-device-width: 640px) {\n  .color-picker[style~=\"left:\"] {\n    max-width: 70%;\n  }\n}\n.color-picker__value {\n  --isLightColor: Min(1, Max(60 - var(--lightness) - (100 - var(--alpha)), 0));\n  grid-area: value;\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  overflow: hidden;\n  border-radius: 10px;\n  color: hsl(var(--hue), 100%, calc(var(--isLightColor) * 100%));\n  box-shadow: 0 0 4px rgba(0, 0, 0, 0.2);\n}\n\n.color-picker__value input {\n  flex: 1;\n  order: 2;\n  cursor: text;\n  width: 0;\n  letter-spacing: -0.5px;\n  word-spacing: -3px;\n  font: 800 16px/2 monospace;\n  font-size: calc(var(--width)*var(--width-units)/ 20);\n  text-transform: uppercase;\n  padding: 0;\n  text-align: center;\n  border: none;\n  outline: none;\n  background: none;\n  color: inherit;\n  transition: color 0.2s;\n}\n\n.color-picker__value input ~ div {\n  position: absolute;\n  z-index: -1;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  border-radius: inherit;\n  background: var(--color);\n}\n\n.color-picker__value input:focus {\n  color: black;\n}\n\n.color-picker__value input:focus ~ button {\n  transform: translateX(100%);\n}\n\n.color-picker__value input:focus + button {\n  transform: translateX(-100%);\n}\n\n.color-picker__value input:focus ~ div {\n  background: none;\n  transition: background 0.15s;\n  border: 3px solid var(--color);\n}\n\n.color-picker__value > button {\n  order: 3;\n  width: 1.5em;\n  background: none;\n  border: none;\n  font: 22px/1.2 monospace;\n  outline: none;\n  color: inherit;\n  cursor: pointer;\n  user-select: none;\n  transition: color 0.2s, transform 0.2s ease-out;\n}\n\n.color-picker__value > button[name=undo] {\n  order: 1;\n}\n\n.color-picker__swatches {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  gap: 3px;\n}\n\n.color-picker__swatches > button {\n  --shadow-size: 2px;\n  order: 0;\n  padding: 12px;\n  width: 0;\n  height: 0;\n  border-radius: 50%;\n  background: var(--c);\n  font-size: 18px;\n  line-height: 1px;\n  text-indent: -6px;\n  transition: 0.1s;\n  box-shadow: 0 0 0 var(--shadow-size) inset var(--color);\n}\n\n.color-picker__swatches > button:hover:not(:active) {\n  --shadow-size: 4px;\n}\n\n.color-picker__swatch {\n  order: 1;\n  padding: 12px;\n  line-height: 0;\n  border-radius: 50%;\n  background: var(--c);\n  position: relative;\n  cursor: pointer;\n  transition: 0.15s ease-in-out;\n}\n\n.color-picker__swatch:hover {\n  transition: 50ms;\n}\n\n.color-picker__swatch:hover > button {\n  opacity: 1;\n}\n\n.color-picker__swatch.cp_remove {\n  padding: 0;\n  pointer-events: none;\n  transition: 0.2s;\n}\n\n.color-picker__swatch > button {\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 0;\n  height: 0;\n  border-radius: 50%;\n  line-height: 0.1;\n  color: black;\n  font-weight: 800;\n  text-shadow: 0 3px white, -2px 1px white;\n}";

	var isObject = (obj => obj + "" === "[object Object]");

	function parseHTML (s) {
	  var parser = new DOMParser(),
	      node = parser.parseFromString(s.trim(), "text/html");
	  return node.body.firstElementChild;
	}

	const mergeDeep = (target, ...sources) => {
	  if (!sources.length) return target;
	  const source = sources.shift();
	  if (isObject(target) && isObject(source)) {
	    for (const key in source) {
	      if (isObject(source[key])) {
	        if (!target[key]) Object.assign(target, {
	          [key]: {}
	        });
	        mergeDeep(target[key], source[key]);
	      } else {
	        Object.assign(target, {
	          [key]: source[key]
	        });
	      }
	    }
	  }
	  return mergeDeep(target, ...sources);
	};

	var isModernBrowser = (() => window.CSS && CSS.supports('top', 'var(--a)'));

	var position = ((elm, pos) => {
	  const overflowOffset = 20;
	  const pageSize = {
	    w: document.documentElement.clientWidth,
	    h: document.documentElement.clientHeight
	  };
	  const elmSize = {
	    w: elm.clientWidth,
	    h: elm.clientHeight
	  };
	  const newPos = {
	    left: pos.x + elmSize.w > pageSize.w
	    ? pageSize.w - elmSize.w - overflowOffset : pos.x - elmSize.w / 2,
	    top: pos.y + elmSize.h > pageSize.h
	    ? pageSize.h - elmSize.h - overflowOffset : pos.y
	  };
	  elm.style.left = newPos.left;
	  elm.style.top = newPos.top;
	});

	var getKnobsGroups = (knobs => knobs.reduce((acc, knobData) => {
	  if (!isObject(knobData) && acc[acc.length - 1].length) acc.push([]);
	  acc[acc.length - 1].push(knobData);
	  return acc;
	}, [[]]));

	const generateId = () => Math.random().toString(36).slice(-6);
	function cloneKnobs (knobs, persistedData) {
	  return knobs.map(k => {
	    if (k && k.type) {
	      k.__name = k.__name || (k.label?.replaceAll(' ', '-').toLowerCase() || '') + '-' + generateId();
	      k.defaultValue = k.defaultValue ?? k.value ?? this.getKnobValueFromCSSVar(k) ?? '';
	      k.defaultChecked = k.defaultChecked ?? !!k.checked;
	      k.isToggled = k.isToggled ?? true;
	      if (persistedData) {
	        let thisKnobPersistedData = persistedData.find(a => a.label && a.label == k.label);
	        if (thisKnobPersistedData) {
	          if (k.defaultValue) thisKnobPersistedData.defaultValue = k.defaultValue;
	          if (k.options) {
	            thisKnobPersistedData.options = k.options;
	          }
	          return thisKnobPersistedData;
	        }
	      }
	      if (k.type == 'range') {
	        k.value = +k.value || k.defaultValue;
	        k.defaultValue = +k.defaultValue;
	      } else if (k.type == 'checkbox') {
	        k.checked = k.checked || k.defaultChecked;
	      } else {
	        k.value = k.value || k.defaultValue;
	      }
	    }
	    if (k.render) {
	      k.__name = "custom-" + generateId();
	    }
	    return k.cssVar ? { ...k,
	      cssVar: [...k.cssVar]
	    } : isObject(k)
	    ? { ...k
	    } : k;
	  });
	}

	var settingsIcon = `<div class='leversIcon'>
  <div><b></b></div>
  <div><b></b></div>
  <div><b></b></div>
</div>
`;
	function scope() {
	  const {
	    visible
	  } = this.settings;
	  return `
    <input hidden type='checkbox' ${visible ? 'checked' : ''} id='knobsToggle' />
    ${knobs.call(this, {})}
  `;
	}
	function knobs({
	  withToggler = true
	}) {
	  const {
	    visible,
	    live,
	    theme
	  } = this.settings;
	  return `
    <aside class='knobs' data-position='${theme.position}' data-flow='${theme.flow}'>
      ${withToggler ? `<label title='Demo Settings' ${visible == 2 ? "style='display:none'" : ''} for='knobsToggle'>${settingsIcon}</label>` : ''}
      <div class='knobs__bg'></div>
      <form class='knobs__labels'>
        <div class='knobs__groups'>
          <!-- Knobs goes here -->
        </div>
        <section class='knobs__controls'>
          ${live ? '' : `<input type="submit" value="Apply">`}
          <input type="reset" value="↩ Reset" title="Reset to defaults">
          <a class='poweredBy' href='https://github.com/yairEO/knobs' target='_blank'>Get <em>Knobs</em></a>
        </section>
      </form>
    </aside>
  `;
	}
	function fieldset(knobsGroup) {
	  var legend, knobs;
	  if (isObject(knobsGroup[0])) {
	    knobs = knobsGroup;
	  } else {
	    [legend, ...knobs] = knobsGroup;
	    let getLegendParams = legend instanceof Array ? {
	      label: legend[0],
	      checked: !!legend[1]
	    } : {
	      label: legend,
	      checked: true
	    };
	    legend = getLegend({ ...getLegendParams,
	      knobsCount: knobs.length
	    });
	  }
	  return `<fieldset ${legend ? 'data-has-legend' : ''}>
    ${legend ? legend : ''}
    <div class="fieldset__group">
      <div class="fieldset__group__wrap">
        ${knobs.map(knob.bind(this)).join("")}
      </div>
    </div>
  </fieldset>`;
	}
	function knob(data) {
	  if (data.render && !data.label) return `<div class='knobs__knob ${data.knobClass || ''}'>${data.render}</div>`;
	  if (data) return `<div class='knobs__knob ${data.knobClass || ''}' id="${data.__name}">
        <input type='checkbox' css-util-before data-for-knob='${data.__name}' ${data.isToggled === false ? "" : "checked"} class='knobs__knob__toggle' title='Temporarily disable the knob' />
        <label data-type='${data.type || ''}' class='knobs__knob__label'>
          ${data.label ? `<div class='knobs__knob__label__text' title='${data.labelTitle || ''}' ${data.cssVar && data.cssVar[1] ? `data-units='${data.cssVar[1].replace('-', '')}'` : ''}>${data.label}</div>` : ''}
          <div class='knobs__knob__inputWrap'>
            ${data.render ? data.render : getInput.call(this, data)}
          </div>
        </label>
        <button type='button' name='${data.__name}' class='knobs__knob__reset' title='Reset'>↩</button>
      </div>
    `;
	}
	function getLegend({
	  label,
	  checked,
	  knobsCount
	}) {
	  var id = label.replace(/ /g, '-') + Math.random().toString(36).slice(-6);
	  return `<input hidden id="${id}" type="checkbox" ${checked ? "checked" : ""} class="toggleSection">
          <label class="knobs__legend" ${label && `data-has-label`} for="${id}" title="Expand/Collapse">
            <div>
              ${label && `<span>${label}</span>`}
              <span class='knobs__legend__knobsCount' css-util-before>${knobsCount}</span>
            </div>
          </label>`;
	}
	function getInput(data) {
	  let {
	    label,
	    type,
	    step,
	    min,
	    max,
	    value,
	    name,
	    options
	  } = data;
	  if (type == 'range') return `
      <div class="range-slider" style="--step:${step || 1}; --min:${min}; --max:${max}; --value:${value}; --text-value:'${value}'">
        <input type="range" ${this.knobAttrs(data)}>
        <output></output>
        <div class='range-slider__progress'></div>
      </div>`;
	  if (type == 'checkbox') return `
      <div class="switch">
        <input type='${type}' ${this.knobAttrs(data)} class="switch__input">
        <div class='switch__gfx'></div>
      </div>`;
	  if (type == 'radio' && options?.length) {
	    data.name = data.name || label.toLowerCase().replaceAll(' ', '-');
	    return options.map((v, i) => `<label title="${options[i].value}"><input type='radio' ${this.knobAttrs({ ...data,
      groupValue: data.value,
      ...options[i]
    })}/><div>${v.label}</div></label>`).join('');
	  }
	  if (type == 'select' && options?.length) return `
      <select ${this.knobAttrs(data)}>
        ${options.map(v => `<option ${(Array.isArray(v) ? v[0] : v) == data.value ? 'selected' : ''} value='${Array.isArray(v) ? v[0] : v}'>${Array.isArray(v) ? v[1] : v}</option>`)}
      </select>`;
	  if (type == 'color') type = 'text';
	  return `<div><input type='${type}' data-type='${data.type}' ${this.knobAttrs(data)}></div>`;
	}

	var templates = /*#__PURE__*/Object.freeze({
		__proto__: null,
		scope: scope,
		knobs: knobs,
		fieldset: fieldset,
		knob: knob
	});

	const raf = window.requestAnimationFrame || (cb => window.setTimeout(cb, 1000 / 60));
	const is = (elm, cls) => elm.classList.contains(cls);
	function bindEvents() {
	  this.eventsRefs = this.eventsRefs || {
	    change(e) {
	      if (!e.target.dataset.name) return;
	      this.onChange(e);
	    },
	    input(e) {
	      try {
	        let isSectionToggler = is(e.target, 'toggleSection'),
	        groupElm;
	        if (isSectionToggler && e.target.checked) {
	          groupElm = e.target.parentNode.querySelector('.fieldset__group');
	          this.setIframeProps({
	            heightOffset: 9999
	          });
	        }
	      } catch (err) {}
	      if (e.target.hasAttribute('is-knob-input')) {
	        this.onInput(e);
	        this.onChange(e);
	      } else if (is(e.target, 'knobs__knob__toggle')) this.toggleKnob(e.target.dataset.forKnob, e.target.checked);
	    },
	    transitionstart(e) {
	      if (is(e.target, 'fieldset__group__wrap')) {
	        e.target.parentNode.setAttribute('transitioned', 1);
	      }
	    },
	    transitionend(e) {
	      if (is(e.target, 'fieldset__group__wrap')) {
	        e.target.parentNode.removeAttribute('transitioned');
	        this.setIframeProps();
	      }
	    },
	    wheel(e) {
	      const {
	        value,
	        max,
	        step,
	        type
	      } = e.target,
	            delta = Math.sign(e.deltaY) * (+step || 1) * -1;
	      if (type == 'range') e.preventDefault();
	      if (value && max) {
	        e.target.value = Math.min(Math.max(+value + delta, 0), +max);
	        this.onInput(e);
	        this.onChange(e);
	      }
	    },
	    mainToggler(e) {
	      this.toggle(e.target.checked);
	    },
	    reset: this.applyKnobs.bind(this, null, true),
	    submit: this.onSubmit.bind(this),
	    click: this.onClick.bind(this),
	    focusin: this.onFocus.bind(this)
	  };
	  [['scope', 'click'], ['form', 'change'], ['form', 'input'], ['form', 'reset'], ['form', 'submit'], ['form', 'focusin'], ['form', 'transitionend'], ['form', 'transitionstart'], ['scope', 'wheel'], ['mainToggler', 'change', this.eventsRefs.mainToggler.bind(this)]].forEach(([elm, event, cb]) => this.DOM[elm] && this.DOM[elm].addEventListener(event, cb || this.eventsRefs[event].bind(this), {
	    passive: false
	  }));
	  whenKnobsParentResizes.call(this);
	}
	function whenKnobsParentResizes() {
	  let debounceTimer,
	      that = this;
	  const resizeObserver = new ResizeObserver(entries => {
	    clearTimeout(debounceTimer);
	    debounceTimer = setTimeout(() => {
	      that.setIframeProps();
	    }, 500);
	  });
	  resizeObserver.observe(this.settings.appendTo);
	}
	function onFocus(e) {
	}
	function onInput(e) {
	  const inputElm = e.target,
	        {
	    type,
	    value,
	    checked,
	    dataset: {
	      name
	    }
	  } = inputElm,
	        isCheckbox = type == 'checkbox',
	        {
	    label
	  } = this.getKnobDataByName(name);
	  this.setParentNodeValueVars(inputElm);
	  this.setKnobDataByName(name, isCheckbox ? {
	    checked
	  } : {
	    value
	  });
	  if (value != undefined && label)
	    this.setPersistedData();
	}
	function onChange(e, ignoreSimilar) {
	  const name = e.target.dataset.name;
	  this.setKnobChangedFlag(this.getKnobElm(name));
	  const knobData = this.getKnobDataByName(name),
	        runOnInput = e.type == 'input' && knobData && knobData.type != 'range',
	  isCheckbox = knobData && knobData.type == 'checkbox',
	        extraData = {};
	  if (!knobData) {
	    console.warn("Knob data was not found:", {
	      name,
	      knobData
	    });
	    return;
	  }
	  const similarKnobs = ignoreSimilar ? [] : this.getSimilarKnobs(knobData);
	  if (similarKnobs.length) {
	    similarKnobs.forEach(knob => {
	      const inputElm = this.getInputByName(knob.__name);
	      inputElm.value = knobData.value;
	      this.onInput({
	        target: inputElm
	      });
	    });
	  }
	  if (!isCheckbox && !this.settings.live) return;
	  if (e.type == 'input' && runOnInput) return;
	  raf(() => this.updateDOM(knobData));
	  if (knobData.type === 'color') extraData.hsla = CSStoHSLA(colorPicker.exports.changeColorFormat(knobData.value, 'HSL'));
	  typeof knobData.onChange == 'function' && knobData.onChange(e, knobData, extraData);
	}
	function onSubmit(e) {
	  e.preventDefault();
	  var elements = e.target.querySelectorAll('input[data-name]');
	  this.settings.live = true;
	  elements.forEach(elm => this.onChange({
	    target: {
	      value: elm.value,
	      type: elm.type,
	      dataset: {
	        name: elm.dataset.name
	      }
	    }
	  }));
	  this.settings.live = false;
	  return false;
	}
	function onClick(e) {
	  const {
	    target
	  } = e;
	  const iframePos = this.DOM.iframe.getBoundingClientRect();
	  this.hideColorPickers(target.colorPicker ? target.colorPicker.DOM.scope : null);
	  if (is(target, 'knobs__knob__reset')) this.resetKnobByName(target.name);
	  if (target.dataset.type == 'color') setTimeout(_ => this.toggleColorPicker(target, {
	    x: e.clientX + iframePos.x,
	    y: e.clientY + iframePos.y + 20
	  }), 100);
	}

	var events = /*#__PURE__*/Object.freeze({
		__proto__: null,
		bindEvents: bindEvents,
		onFocus: onFocus,
		onInput: onInput,
		onChange: onChange,
		onSubmit: onSubmit,
		onClick: onClick
	});

	const VERSION = 1;
	const STORE_KEY = '@yaireo/knobs/knobs';
	const isStringOrNumber = a => typeof a == 'string' || typeof a == 'number';
	function getPersistedData() {
	  let _store = this.settings.persist,
	      customKey = isStringOrNumber(_store) ? '/' + _store : '',
	      persistedData,
	      versionMatch = localStorage.getItem(`${STORE_KEY + customKey}/v`) == VERSION;
	  if (versionMatch) {
	    try {
	      persistedData = JSON.parse(localStorage[STORE_KEY + customKey]);
	    } catch (err) {}
	  }
	  return persistedData;
	}
	function setPersistedData() {
	  let _store = this.settings.persist,
	      customKey = isStringOrNumber(_store) ? '/' + _store : '';
	  if (_store) {
	    let persistedData = JSON.stringify(this.knobs);
	    localStorage.setItem(`${STORE_KEY + customKey}/v`, VERSION);
	    localStorage.setItem(STORE_KEY + customKey, persistedData);
	    dispatchEvent(new Event('storage'));
	  }
	}

	var persist = /*#__PURE__*/Object.freeze({
		__proto__: null,
		getPersistedData: getPersistedData,
		setPersistedData: setPersistedData
	});

	var DEFAULTS = {
	  visible: 0,
	  live: true,
	  theme: {
	    flow: 'horizontal',
	    styles: '',
	    RTL: false,
	    position: 'top right',
	    primaryColor: '#0366D6',
	    "range-value-background": '#FFF',
	    "base-color": '#000',
	    textColor: "white",
	    border: 'none'
	  }
	};

	function EventDispatcher() {
	  var target = document.createTextNode('');
	  function addRemove(op, events, cb) {
	    if (cb) events.split(/\s+/g).forEach(name => target[op + 'EventListener'].call(target, name, cb));
	  }
	  return {
	    off(events, cb) {
	      addRemove('remove', events, cb);
	      return this;
	    },
	    on(events, cb) {
	      if (cb && typeof cb == 'function') addRemove('add', events, cb);
	      return this;
	    },
	    trigger(eventName, data, opts) {
	      var e;
	      opts = opts || {
	        cloneData: true
	      };
	      if (!eventName) return;else {
	        try {
	          var eventData = typeof data === 'object' ? data : {
	            value: data
	          };
	          eventData = opts.cloneData ? mergeDeep({}, eventData) : eventData;
	          eventData.knobs = this;
	          if (data instanceof Object) for (var prop in data) if (data[prop] instanceof HTMLElement) eventData[prop] = data[prop];
	          e = new CustomEvent(eventName, {
	            "detail": eventData
	          });
	        } catch (err) {
	          console.warn(err);
	        }
	        target.dispatchEvent(e);
	      }
	    }
	  };
	}

	function Knobs(settings) {
	  if (!isModernBrowser()) return this;
	  const {
	    knobs = [],
	    ...restOfSettings
	  } = settings || {};
	  this.settings = mergeDeep({ ...DEFAULTS,
	    appendTo: document.body
	  }, restOfSettings);
	  mergeDeep(this, EventDispatcher());
	  this.knobs = knobs;
	  this.DOM = {};
	  this.state = {};
	  this.build();
	}
	Knobs.prototype = {
	  _types: ['range', 'color', 'checkbox', 'text'],
	  ...events,
	  ...persist,
	  cloneKnobs,
	  set knobs(knobs) {
	    if (knobs && knobs instanceof Array) {
	      this._knobs = this.cloneKnobs(knobs, this.getPersistedData());
	      this.DOM && this.render();
	    }
	  },
	  get knobs() {
	    return this._knobs;
	  },
	  getCSSVariables({
	    flow,
	    styles,
	    RTL,
	    position,
	    ...vars
	  }) {
	    var output = '',
	        p;
	    if (this.settings.knobsToggle) vars['knobs-toggle'] = 1;
	    const hslColor = colorPicker.exports.changeColorFormat(vars['base-color'], 'hsl');
	    const baseColor = colorPicker.exports.CSStoHSLA(hslColor);
	    vars['base-color'] = `${baseColor[0]}, ${baseColor[1]}%`;
	    vars['base-color-l'] = `${baseColor[2]}%`;
	    vars['base-color-a'] = `${baseColor[3]}%`;
	    for (p in vars) output += `--${p}:${vars[p]}; `;
	    return output;
	  },
	  getKnobValueFromCSSVar(data) {
	    let value;
	    if (!("value" in data) && data.cssVar && data.cssVar.length) {
	      let CSSVarTarget = data.cssVar[2] || this.settings.CSSVarTarget;
	      if (CSSVarTarget.length) CSSVarTarget = CSSVarTarget[0];
	      value = getComputedStyle(CSSVarTarget).getPropertyValue(`--${data.cssVar[0]}`).trim();
	      if (data.type == 'range') value = parseInt(value);
	      if (data.type == 'color' && !value) value = 'transparent';
	      return value;
	    }
	  },
	  templates,
	  hideColorPickers(exceptNode) {
	    document.querySelectorAll('.color-picker').forEach(elm => elm != exceptNode && elm.classList.add('hidden'));
	  },
	  toggleColorPicker(inputElm, pos) {
	    const value = inputElm.value,
	          name = inputElm.dataset.name,
	          knobData = this.getKnobDataByName(name),
	    that = this;
	    let cPicker = inputElm.colorPicker;
	    if (cPicker && !cPicker.DOM.scope.classList.contains('hidden')) {
	      cPicker.DOM.scope.classList.add('hidden');
	      return;
	    }
	    cPicker = cPicker || new ColorPicker({
	      defaultFormat: knobData.defaultFormat,
	      color: value,
	      className: 'hidden',
	      swatches: [],
	      swatchesLocalStorage: true,
	      onClickOutside(e) {
	        if (!cPicker.DOM.scope.classList.contains('hidden')) that.hideColorPickers(cPicker.DOM.scope);
	        let action = 'add';
	        if (e.target == inputElm) action = 'toggle';
	        if (e.key == 'Escape') action = 'add';
	        cPicker.DOM.scope.classList[action]('hidden');
	      },
	      onInput(color) {
	        inputElm.value = color;
	        that.onInput({
	          type: 'input',
	          target: inputElm
	        });
	        that.onChange({
	          type: 'change',
	          target: inputElm
	        });
	      }
	    });
	    if (!document.body.contains(cPicker.DOM.scope)) {
	      inputElm.colorPicker = cPicker;
	      document.body.appendChild(cPicker.DOM.scope);
	    }
	    setTimeout(() => {
	      position(cPicker.DOM.scope, pos);
	      cPicker.DOM.scope.classList.remove('hidden');
	    }, 100);
	  },
	  knobAttrs(data) {
	    var attributes = `data-name="${data.__name}" is-knob-input`,
	        blacklist = ['label', 'type', 'onchange', 'options', 'selected', 'cssvar', '__name', 'istoggled', 'defaultchecked', 'defaultvalue'];
	    if (data.type === 'radio' && data.groupValue === data.value) data.checked = true;
	    for (var attr in data) {
	      if (attr == 'checked' && !data[attr]) continue;
	      if (!blacklist.includes(attr.toLowerCase())) attributes += ` ${attr}="${data[attr]}"`;
	    }
	    return attributes;
	  },
	  getKnobDataByName(name) {
	    return this.knobs.filter(Boolean).find(d => d.__name == name);
	  },
	  setKnobDataByName(name, d) {
	    if (name && d && isObject(d)) {
	      const knobData = this.getKnobDataByName(name);
	      for (let key in d)
	      knobData[key] = +d[key] === d[key] ? +d[key] : d[key];
	    }
	  },
	  getInputByName(name) {
	    const inputs = this.getKnobElm(name).querySelectorAll(`[data-name="${name}"`);
	    return inputs.length > 1 ? inputs : inputs[0];
	  },
	  getKnobElm(name) {
	    return this.DOM.scope.querySelector(`#${name}`);
	  },
	  getSimilarKnobs(toKnob) {
	    return this.knobs.filter(knob => knob?.cssVar?.[0] && knob?.cssVar?.[0] == toKnob?.cssVar?.[0] &&
	    knob.__name != toKnob.__name
	    );
	  },
	  setParentNodeValueVars(inputElm) {
	    inputElm && [['--value', inputElm.value], ['--text-value', JSON.stringify(inputElm.value)]].forEach(([name, value]) => inputElm?.parentNode.style.setProperty(name, value));
	  },
	  updateDOM({
	    cssVar,
	    value,
	    type,
	    isToggled,
	    __name: name
	  }) {
	    if (!cssVar || !cssVar.length) return;
	    var [cssVarName, cssVarUnit, CSSVarTarget] = cssVar,
	        targetElms = CSSVarTarget || this.settings.CSSVarTarget,
	        knobInput = this.getInputByName(name),
	        action = 'setProperty';
	    if (!isToggled || type == 'checkbox' && knobInput && !knobInput.checked) action = 'removeProperty';
	    if (cssVarUnit && cssVarUnit[0] == '-') cssVarUnit = '';
	    if (Object.prototype.toString.call(targetElms).includes("Element")) targetElms = [targetElms];
	    if (targetElms && targetElms.length && value !== undefined && cssVarName) for (let elm of targetElms) elm.style[action](`--${cssVarName}`, value + (cssVarUnit || ''));
	  },
	  applyKnobs(knobsData, reset) {
	    (knobsData || this.knobs).forEach(d => {
	      if (!d || !d.__name || d.render) return;
	      var isType = name => d.type == name,
	          inputElm = this.getInputByName(d.__name),
	          e,
	          vKey = reset ? 'defaultValue' : 'value',
	          checkedKey = reset ? 'defaultChecked' : 'checked',
	          resetTitle;
	      if (isType('radio')) {
	        inputElm = [...inputElm];
	        if (reset) {
	          inputElm = inputElm.find(el => el.value == d[vKey]);
	          inputElm.checked = true;
	        } else inputElm = inputElm.find(el => el.checked);
	      }
	      e = {
	        target: inputElm
	      };
	      this.setParentNodeValueVars(inputElm);
	      if (!d.type || d.isToggled === false) return;
	      if (isType('checkbox')) {
	        resetTitle = inputElm.checked = !!d.checked;
	        inputElm.checked = d[checkedKey];
	      } else resetTitle = inputElm.value = d[vKey];
	      this.setResetKnobTitle(d.__name, resetTitle);
	      if (inputElm.value !== '' || inputElm.value === d[vKey]) {
	        this.onInput(e);
	        this.onChange(e, true);
	      }
	      setTimeout(() => {
	        if (!isType('checkbox')) inputElm.value = d[vKey];
	        if (isType('color')) inputElm.title = inputElm.value;
	      });
	      this.setKnobChangedFlag(this.getKnobElm(d.__name), d.value != d.defaultValue);
	    });
	  },
	  setResetKnobTitle(name, title) {
	    try {
	      title = "Reset to " + title;
	      this.getKnobElm(name).querySelector('.knobs__knob__reset').title = title;
	    } catch (err) {}
	  },
	  resetKnobByName(name) {
	    this.setKnobChangedFlag(this.getKnobElm(name), false);
	    this.applyKnobs([this.getKnobDataByName(name)], true);
	  },
	  calculateGroupsHeights() {
	    var groupElms = this.DOM.form.querySelectorAll('.fieldset__group__wrap');
	    groupElms.forEach(groupElm => {
	      groupElm.style.setProperty('--height', groupElm.clientHeight);
	    });
	  },
	  setIframeProps(opts) {
	    var action = (this.state.visible == false ? 'remove' : 'set') + 'Property',
	    style = this.DOM.iframe.style,
	        {
	      heightOffset = 0
	    } = opts || {};
	    if (action == 'setProperty') {
	      style.setProperty(`--knobsWidth`, '2000px');
	      style.setProperty(`--knobsHeight`, '10000px');
	    }
	    var {
	      clientWidth,
	      clientHeight
	    } = this.DOM.scope;
	    style[action](`--knobsWidth`, clientWidth + 'px');
	    style[action](`--knobsHeight`, +clientHeight + +heightOffset + 'px');
	  },
	  toggle(state) {
	    if (!this.DOM.mainToggler) return;
	    if (state === undefined) state = !this.DOM.mainToggler.checked;
	    this.state.visible = state;
	    this.DOM.mainToggler.checked = state;
	    this.setIframeProps();
	  },
	  toggleKnob(name, isToggled) {
	    let knobData = this.getKnobDataByName(name),
	        key = knobData.type == 'checkbox' ? 'checked' : 'value',
	    keyVal = isToggled ? key == 'checked' ? knobData.checked : knobData.value : key == 'checked' ? knobData.defaultChecked : knobData.value;
	    knobData.isToggled = isToggled;
	    knobData[key] = keyVal;
	    this.updateDOM(knobData);
	    typeof knobData.onChange == 'function' && knobData.onChange(null, knobData);
	    this.setPersistedData();
	  },
	  setKnobChangedFlag(knobElm, action) {
	    knobElm && knobElm[(action == false ? 'remove' : 'set') + 'Attribute']('data-changed', true);
	  },
	  build() {
	    if (this.settings.standalone) {
	      this.DOM.scope = parseHTML(this.templates.knobs.call(this, {
	        withToggler: false
	      }));
	    } else {
	      const iframeDoc = this.createIframe();
	      this.DOM.scope = iframeDoc.body.querySelector('.knobs');
	      this.DOM.groups = iframeDoc.body.querySelector('.knobs__groups');
	      this.DOM.mainToggler = iframeDoc.getElementById('knobsToggle');
	    }
	    this.DOM.form = this.DOM.scope.querySelector('form');
	    this.render();
	    setTimeout(this.bindEvents.bind(this));
	  },
	  createIframe() {
	    var iframeDoc,
	        theme = this.settings.theme,
	        cssText;
	    this.DOM.iframe = document.createElement('iframe');
	    this.DOM.iframe.setAttribute('class', 'knobsIframe');
	    this.DOM.iframe.style.cssText = `
        border: none;
        position: fixed;
        z-index: 999999;
        ${(theme.position + " ").split(" ").join(":0;")}
        width: var(--knobsWidth, 56px);
        height: clamp(56px, var(--knobsHeight, 56px), 100%);
    `;
	    this.settings.appendTo.appendChild(this.DOM.iframe);
	    iframeDoc = this.DOM.iframe.contentWindow.document;
	    iframeDoc.open();
	    iframeDoc.write(this.templates.scope.call(this));
	    cssText = `.knobs{ ${this.getCSSVariables(theme)} }`;
	    cssText += mainStyles + theme.styles;
	    iframeDoc.head.insertAdjacentHTML("beforeend", `<style>${cssText}</style>`);
	    iframeDoc.close();
	    return iframeDoc;
	  },
	  render() {
	    var knobsGroups = getKnobsGroups(this.knobs);
	    var fieldsetElms = knobsGroups.map(this.templates.fieldset.bind(this)).join("");
	    this.DOM.groups.innerHTML = fieldsetElms;
	    this.calculateGroupsHeights();
	    this.DOM.mainToggler && this.toggle(this.DOM.mainToggler.checked);
	    this.applyKnobs();
	    this.knobs.forEach(knob => knob && knob.script && knob.script(this, knob.__name));
	    const hostCSSExists = [...document.styleSheets].some(s => s.title == '@yaireo/knobs');
	    if (!hostCSSExists) document.head.insertAdjacentHTML('beforeend', `<style title='@yaireo/knobs'>
      ${colorPickerStyles}
      ${hostStyles}
      </style>`);
	    this.trigger('render');
	    this.settings?.callbacks?.render();
	  }
	};
	const color = {
	  format: colorPicker.exports.changeColorFormat,
	  CSStoHSLA: colorPicker.exports.CSStoHSLA
	};

	exports.color = color;
	exports['default'] = Knobs;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
